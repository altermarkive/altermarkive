@page "/"

@inject ISnackbar Snackbar
@inject StaticMap StaticMapHttp

<style>
    .drag-drop-zone {
        display: flex;
        align-items: center;
        justify-content: center;
        width: 100vw;
        height: 100vh;
    }

    .drag-drop-input {
        position: absolute;
        width: 100%;
        height: 100%;
        opacity: 0;
        cursor: pointer;
        z-index: 2;
    }

    .container {
        width: 100vw;
        height: 100vh;
    }

    .svg {
        width: 100%;
        height: 100%;
        object-fit: contain;
        overflow: hidden;
    }
</style>

<MudPaper Class="drag-drop-zone" Elevation="0">
    <InputFile OnChange="OnInputFileChanged" Class="drag-drop-input" />
    <MudText Typo="Typo.h3">GPX ➜ SVG</MudText>
</MudPaper>

<MudOverlay @bind-Visible="visible" DarkBackground="true" ZIndex="9999" AutoClose="true">
    <div class="container">
        <img class="svg" src="@svg" />
    </div>
</MudOverlay>

@using System.IO
@using System.Text
@using System.Xml

@code {
    private bool visible = false;
    private string svg = String.Empty;

    private async void OnInputFileChanged(InputFileChangeEventArgs eventArgs)
    {
        IReadOnlyList<IBrowserFile> files = eventArgs.GetMultipleFiles(1);
        Stream stream = files[0].OpenReadStream(10485760);
        using (StreamReader reader = new StreamReader(stream, Encoding.UTF8))
        {
            string gpx = await reader.ReadToEndAsync();
            try
            {
                svg = await StaticMapHttp.RenderAsync(gpx);
                visible = true;
                StateHasChanged();
                System.Console.WriteLine("OK - Loaded GPX file");
            }
            catch (XmlException exception)
            {
                Snackbar.Configuration.PositionClass = Defaults.Classes.Position.BottomCenter;
                Snackbar.Add("Invalid or oversized (> 10 MiB) GPX file", Severity.Error);
                System.Console.WriteLine("ERROR - Invalid or oversized (> 10 MiB) GPX file:\n" + exception.StackTrace);
            }
        }
    }
}
